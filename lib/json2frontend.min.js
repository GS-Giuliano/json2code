(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
function Json2frontend(options) {
  if (typeof options === "object") {
    if (typeof options.module === "string") {
      switch(options.module)
      {
        case 'html':
          const moduleClassHtml = require("./modules/html.js");
          return new moduleClassHtml(options);
          break;
        case 'bootstrap':
          const moduleClassBootstrap = require("./modules/bootstrap.js");
          return new moduleClassBootstrap(options);
          break;
        case 'uikit':
          const moduleClassUikit = require("./modules/uikit.js");
          return new moduleClassUikit(options);
          break;
        case 'bulma':
          const moduleClassBulma = require("./modules/bulma.js");
          return new moduleClassBulma(options);
          break;
        case 'skeleton':
          const moduleClassSkeleton = require("./modules/skeleton.js");
          return new moduleClassSkeleton(options);
          break;
      }      
      
    }
  }
}

exports = module.exports = Json2frontend;

},{"./modules/bootstrap.js":3,"./modules/bulma.js":4,"./modules/html.js":5,"./modules/skeleton.js":6,"./modules/uikit.js":7}],2:[function(require,module,exports){
/**
 * Example module to parse JSON to ...
 */

class RootParser {
  constructor(options) {
    this.output = "";
    this.useOutput = true;
    this.useCDN = false;
    this.useModule = "";
    this.linksJS = "";
    this.linksCSS = "";

    this.page = {
      title: "",
      titleBegin: "",
      titleEnd: "",
      top: "",
      head: "",
      headBegin: "",
      headEnd: "",
      begin: "",
      end: "",
      bottom: "",
    };

    this.headerContent = "";
    this.bodyContent = "";
    this.footerContent = "";
    this.styles = {
      default: "",
      dark: "",
      light: "",
      white: "",
      primary: "",
      link: "",
      info: "",
      warning: "",
      danger: "",
    };

    this.classes = {
      text: "",
      bold: "",
      italic: "",
      underline: "",
      url: "",
      title: "",
      subTitle: "",
      code: "",
    };

    if (typeof options === "object") {
      if (options.useCDN === true) {
        this.useCDN = true;
      } else {
        this.useCDN = false;
      }
    }
  }

  top(options) {
    this.beginOptions = options;
    if (typeof this.beginOptions.title === "string") {
      this.page.title = this.beginOptions.title;
    }
    this.output = "";
  }

  begin() {
    this.output = this.output + this.page.begin;
  }
  end() {
    this.output = this.output + this.page.end;
  }

  bottom() {
    if (typeof this.beginOptions === "object") {
      let output = this.page.top;
      if (this.page.head != "") {
        output = output + this.page.headBegin;
        output = output + this.page.head;
        if (this.page.title != "") {
          output =
            output +
            this.page.titleBegin +
            this.page.title +
            this.page.titleEnd;
        }
        if (this.linksCSS != "") {
          output = output + this.linksCSS + "\n";
        }
        output = output + this.page.headEnd;
      }
      this.output =
        output + this.output + this.linksJS + "\n" + this.page.bottom;
    }
  }

  toClass() {
    let classString = "";
    if (arguments.length > 0) {
      let arr = Array();
      for (let i = 0; i < arguments.length; i++) {
        if (typeof arguments[i] === "string" && arguments[i] != "") {
          arr.push(arguments[i]);
        }
      }
      if (arr.length > 0) {
        classString = ' class="' + arr.join(" ") + '"';
      }
    }
    return classString;
  }

  toString(input) {
    if (typeof input === "undefined") {
      return "";
    } else {
      return input.toString();
    }
  }

  toOutput(input) {
    if (this.useOutput) {
      this.output = this.output + "\t" + input + "\n";
    }
    return input;
  }

  css() {
    return this.toOutput(this.linksCSS);
  }

  js() {
    return this.toOutput(this.linksJS);
  }

  text(input) {
    return this.toString(input.data);
  }

  title(input) {
    return this.toOutput(input.data);
  }

  subTitle(input) {
    return this.toOutput(input.data);
  }

  subTitle2(input) {
    return this.toOutput(input.data);
  }

  subTitle3(input) {
    return this.toOutput(input.data);
  }

  filter(input) {
    return this.toOutput(input.data);
  }

  code(input) {
    return this.toOutput(input.data);
  }

  bold(input) {
    return this.toOutput(input.data);
  }

  italic(input) {
    return this.toOutput(input.data);
  }

  underline(input) {
    return this.toOutput(input.data);
  }

  url(input) {
    return this.toOutput(input.data);
  }

  tag(input) {
    return this.toOutput(input.data);
  }
}

module.exports = RootParser;

},{}],3:[function(require,module,exports){
/**
 * Module to parse JSON to Bootstrap
 * https://getbootstrap.com
 *
 */

const HtmlParser = require("./html.js");

class BulmaParser extends HtmlParser {
  constructor(options) {
    super(options);

    this.page = {
      top: "<!DOCTYPE html>\n<html>\n",
      titleBegin: "<title>",
      titleEnd: "</title>\n",
      headBegin: "<head>\n",
      headEnd: "</head>\n<body>\n\n",
      head: '\t<meta charset="utf-8">\n\t<meta name="viewport" content="width=device-width, initial-scale=1">\n',
      begin: '<div class="container">\n\n',
      end: "\n</div>\n\n",
      bottom: "</body>\n</html>",
    };

    this.linksCSS =
      '<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">';

    this.linksJS =
      '<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>';
    this.styles = {
      default: "black",
      dark: "dark",
      light: "light",
      white: "white",
      primary: "primary",
      link: "link",
      info: "info",
      warning: "warning",
      danger: "danger",
    };
    this.classes.title = "";
    this.classes.subTitle = "";
    this.classes.subTitle2 = "";
    this.classes.subTitle3 = "";
    this.classes.bold = "";
    this.classes.italic = "";
    this.classes.tag = "tag";
  }
}

module.exports = BulmaParser;

},{"./html.js":5}],4:[function(require,module,exports){
/**
 * Module to parse JSON to Bulma
 * https://bulma.io
 *
 */

const HtmlParser = require("./html.js");

class BulmaParser extends HtmlParser {
  constructor(options) {
    super(options);

    this.page = {
      top: "<!DOCTYPE html>\n<html>\n",
      titleBegin: "<title>",
      titleEnd: "</title>\n",
      headBegin: "<head>\n",
      headEnd: "</head>\n<body>\n\n",
      head: '\t<meta charset="utf-8">\n\t<meta name="viewport" content="width=device-width, initial-scale=1">\n',
      begin: '<section class="section">\n<div class="container">\n\n',
      end: "\n</div>\n</section>\n\n",
      bottom: "</body>\n</html>",
    };

    this.linksCSS =
      '<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css">';

    this.styles = {
      default: "is-black",
      dark: "is-dark",
      light: "is-light",
      white: "is-white",
      primary: "is-primary",
      link: "is-link",
      info: "is-info",
      warning: "is-warning",
      danger: "is-danger",
    };
    this.classes.title = "title is-2";
    this.classes.subTitle = "subtitle is-3";
    this.classes.subTitle2 = "subtitle is-4";
    this.classes.subTitle3 = "subtitle is-5";
    this.classes.filter = "subtitle is-6";
    this.classes.bold = "";
    this.classes.italic = "";
    this.classes.tag = "tag";
  }
}

module.exports = BulmaParser;

},{"./html.js":5}],5:[function(require,module,exports){
/**
 * Module to parse JSON to HTML
 */

const RootParser = require("./_root.js");

class HtmlParser extends RootParser {
  constructor(options) {
    super(options);

    this.page = {
      top: "<!DOCTYPE html>\n<html>\n",
      titleBegin: "<title>",
      titleEnd: "</title>\n",
      headBegin: "<head>\n",
      headEnd: "</head>\n<body>\n",
      head: '<meta charset="utf-8">\n<meta name="viewport" content="width=device-width, initial-scale=1">\n',
      begin: "",
      end: "",
      bottom: "</body>\n</html>",
    };
  }

  text(input) {
    return this.toOutput(
      "<p" +
        this.toClass(this.classes.text) +
        ">" +
        this.toString(input.data) +
        "</p>"
    );
  }

  title(input) {
    return this.toOutput(
      "<h1" +
        this.toClass(this.classes.title) +
        ">" +
        this.toString(input.data) +
        "</h1>"
    );
  }

  subTitle(input) {
    return this.toOutput(
      "<h2" +
        this.toClass(this.classes.subTitle) +
        ">" +
        this.toString(input.data) +
        "</h2>"
    );
  }

  subTitle2(input) {
    return this.toOutput(
      "<h3" +
        this.toClass(this.classes.subTitle2) +
        ">" +
        this.toString(input.data) +
        "</h3>"
    );
  }

  subTitle3(input) {
    return this.toOutput(
      "<h4" +
        this.toClass(this.classes.subTitle3) +
        ">" +
        this.toString(input.data) +
        "</h4>"
    );
  }

  filter(input) {
    return this.toOutput(
      "<span" +
        this.toClass(this.classes.filter) +
        ">" +
        this.toString(input.data) +
        "</span>"
    );
  }

  code(input) {
    return this.toOutput(
      "<pre" +
        this.toClass(this.classes.code) +
        ">" +
        this.toString(input.data) +
        "</pre>"
    );
  }

  bold(input) {
    return this.toOutput(
      "<strong" +
        this.classes.code +
        ">" +
        this.toString(input.data) +
        "</strong>"
    );
  }

  italic(input) {
    return this.toOutput(
      "<i" +
        this.toClass(this.classes.code) +
        ">" +
        this.toString(input.data) +
        "</i>"
    );
  }

  underline(input) {
    return this.toOutput(
      "<u" +
        this.toClass(this.classes.code) +
        ">" +
        this.toString(input.data) +
        "</u>"
    );
  }

  url(input) {
    let href = input.href ?? "";
    let target = input.target ?? "";
    let onClick = input.onClick ?? "";
    let onChange = input.onChange ?? "";

    if (href !== "") {
      href = ' href="' + href + '"';
    }
    if (target !== "") {
      target = ' target="' + target + '"';
    }
    if (onClick !== "") {
      onClick = ' onClick="' + onClick + '"';
    }
    if (onChange !== "") {
      onChange = ' onChange="' + onChange + '"';
    }

    return this.toOutput(
      "<a" +
        this.toClass(this.classes.code) +
        href +
        target +
        onClick +
        onChange +
        ">" +
        this.toString(input.data) +
        "</a>"
    );
  }

  tag(input) {
    return this.toOutput(
      "<span" +
        this.toClass(this.classes.tag, input.style) +
        ">" +
        this.toString(input.data) +
        "</span>"
    );
  }
}

module.exports = HtmlParser;

},{"./_root.js":2}],6:[function(require,module,exports){
/**
 * Module to parse JSON to Bootstrap
 * https://getbootstrap.com
 *
 */

 const HtmlParser = require("./html.js");

 class BulmaParser extends HtmlParser {
   constructor(options) {
     super(options);
 
     this.page = {
       top: "<!DOCTYPE html>\n<html>\n",
       titleBegin: "<title>",
       titleEnd: "</title>\n",
       headBegin: "<head>\n",
       headEnd: "</head>\n<body>\n\n",
       head: '\t<meta charset="utf-8">\n\t<meta name="viewport" content="width=device-width, initial-scale=1">\n',
       begin: '<div class="container">\n\n',
       end: "\n</div>\n\n",
       bottom: "</body>\n</html>",
     };
 
     this.linksCSS ='<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css">';
     this.linksCSS =
      this.linksCSS +
      "\n" +
       '<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/skeleton/2.0.4/skeleton.min.css">';
 
     this.styles = {
       default: "black",
       dark: "dark",
       light: "light",
       white: "white",
       primary: "primary",
       link: "link",
       info: "info",
       warning: "warning",
       danger: "danger",
     };
     this.classes.title = "";
     this.classes.subTitle = "";
     this.classes.subTitle2 = "";
     this.classes.subTitle3 = "";
     this.classes.bold = "";
     this.classes.italic = "";
     this.classes.tag = "tag";
   }
 }
 
 module.exports = BulmaParser;
 
},{"./html.js":5}],7:[function(require,module,exports){
/**
 * Module to parse JSON to UIKit
 * https://getuikit.com
 *
 */

const HtmlParser = require("./html.js");

class BulmaParser extends HtmlParser {
  constructor(options) {
    super(options);

    this.page = {
      top: "<!DOCTYPE html>\n<html>\n",
      titleBegin: "<title>",
      titleEnd: "</title>\n",
      headBegin: "<head>\n",
      headEnd: "</head>\n<body>\n\n",
      head: '\t<meta charset="utf-8">\n\t<meta name="viewport" content="width=device-width, initial-scale=1">\n',
      begin: '<div class="uk-container">\n\n',
      end: "\n</div>\n\n",
      bottom: "</body>\n</html>",
    };

    this.linksCSS =
      '<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/uikit@3.10.1/dist/css/uikit.min.css" />';

    this.linksJS =
      '<script src="https://cdn.jsdelivr.net/npm/uikit@3.10.1/dist/js/uikit.min.js"></script>';
    this.linksJS =
      this.linksJS +
      "\n" +
      '<script src="https://cdn.jsdelivr.net/npm/uikit@3.10.1/dist/js/uikit-icons.min.js"></script>';
    this.styles = {
      default: "black",
      dark: "dark",
      light: "light",
      white: "white",
      primary: "primary",
      link: "link",
      info: "info",
      warning: "warning",
      danger: "danger",
    };
    this.classes.title = "uk-heading-small";
    this.classes.subTitle = "uk-text-lead";
    this.classes.subTitle2 = "uk-text-large";
    this.classes.subTitle3 = "uk-text-default";
    this.classes.filter = "uk-text-meta";
    this.classes.text = "uk-text-default";
    this.classes.bold = "";
    this.classes.italic = "";
    this.classes.tag = "tag";
  }
}

module.exports = BulmaParser;

},{"./html.js":5}]},{},[1]);
